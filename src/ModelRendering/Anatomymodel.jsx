/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: "npx gltfjsx public/model_files/anatomymodel.gltf" <- generates all the meshes for a file 
*/
import { Color } from 'three';
import React, { useEffect, useMemo} from "react";
import { useGLTF } from '@react-three/drei';
import { useCharacterCustomization } from "./CharacterCustomizationContext.jsx";

function Anatomymodel (props) {
  const { skinColor, selectedGender, bodySize} = useCharacterCustomization();

  // get the correct model file (TODO: update!)
  const modelPath = useMemo(() => {
    let path="";
    if(selectedGender === 'female')
    {
      if (bodySize === 1) {
        path = '/model_files/femaleCaucasian01.gltf';
      } else if (bodySize === 2) {
        path = '/model_files/femaleCaucasian02.gltf';
      } else if (bodySize === 3) {
        path = '/model_files/femaleCaucasian03.gltf';
      } else if (bodySize === 4) {
        path = '/model_files/femaleCaucasian04.gltf';
      } else if (bodySize === 5) {
        path = '/model_files/femaleCaucasian05.gltf';
      } else if (bodySize === 6) {
        path = '/model_files/femaleCaucasian06.gltf';
      } else if (bodySize === 7) {
        path = '/model_files/femaleCaucasian07.gltf';
      } else if (bodySize === 8) {
        path = '/model_files/femaleCaucasian08.gltf';
      }
    }
    else {
      if (bodySize === 1) {
        path = '/model_files/maleCaucasian01.gltf';
      } else if (bodySize === 2) {
        path = '/model_files/maleCaucasian02.gltf';
      } else if (bodySize === 3) {
        path = '/model_files/maleCaucasian03.gltf';
      } else if (bodySize === 4) {
        path = '/model_files/maleCaucasian04.gltf';
      } else if (bodySize === 5) {
        path = '/model_files/maleCaucasian05.gltf';
      } else if (bodySize === 6) {
        path = '/model_files/maleCaucasian06.gltf';
      } else if (bodySize === 7) {
        path = '/model_files/maleCaucasian07.gltf';
      } else if (bodySize === 8) {
      path = '/model_files/maleCaucasian08.gltf';
      }
    }
    return path;
  }, [selectedGender, bodySize]);

  const { nodes, materials } = useGLTF(modelPath);

  // set material color based on user's selected color
  useEffect(() => {
    const newColor = new Color(skinColor);

    // update all material colors
    Object.values(materials).forEach(material => {
      material.color = newColor;
      // update metalness (this is what was making the model dark grey so we need to set to 0)
      material.metalness = 0;
    });
  }, [skinColor, selectedGender, materials]); // update everytime these change

  return (
    <group {...props} dispose={null}>
      {selectedGender === 'female' ? (
        // render female meshes
      <>
      <primitive object={nodes.root} />
      <skinnedMesh geometry={nodes.MBLab_human_female.geometry} material={materials.MBlab_eyelash} skeleton={nodes.MBLab_human_female.skeleton} />
      <skinnedMesh geometry={nodes.MBLab_human_female_1.geometry} material={materials.MBlab_generic} skeleton={nodes.MBLab_human_female_1.skeleton} />
      <skinnedMesh geometry={nodes.MBLab_human_female_2.geometry} material={materials.MBlab_pupil} skeleton={nodes.MBLab_human_female_2.skeleton} />
      <skinnedMesh geometry={nodes.MBLab_human_female_3.geometry} material={materials.MBlab_human_eyes} skeleton={nodes.MBLab_human_female_3.skeleton} />
      <skinnedMesh geometry={nodes.MBLab_human_female_4.geometry} material={materials.MBlab_cornea} skeleton={nodes.MBLab_human_female_4.skeleton} />
      <skinnedMesh geometry={nodes.MBLab_human_female_5.geometry} material={materials.MBlab_iris} skeleton={nodes.MBLab_human_female_5.skeleton} />
      <skinnedMesh geometry={nodes.MBLab_human_female_6.geometry} material={materials.MBLab_skin2} skeleton={nodes.MBLab_human_female_6.skeleton} />
      <skinnedMesh geometry={nodes.MBLab_human_female_7.geometry} material={materials.MBLab_tongue} skeleton={nodes.MBLab_human_female_7.skeleton} />
      <skinnedMesh geometry={nodes.MBLab_human_female_8.geometry} material={materials.MBlab_human_teeth} skeleton={nodes.MBLab_human_female_8.skeleton} />
      <skinnedMesh geometry={nodes.MBLab_human_female_9.geometry} material={materials.MBLab_nails} skeleton={nodes.MBLab_human_female_9.skeleton} />
    </>
    // otherwise render male meshes
    ) : (
      <>
      <primitive object={nodes.root} />
      <skinnedMesh geometry={nodes.MBLab_human_male.geometry} material={materials.MBlab_eyelash} skeleton={nodes.MBLab_human_male.skeleton} />
      <skinnedMesh geometry={nodes.MBLab_human_male_1.geometry} material={materials.MBlab_generic} skeleton={nodes.MBLab_human_male_1.skeleton} />
      <skinnedMesh geometry={nodes.MBLab_human_male_2.geometry} material={materials.MBlab_pupil} skeleton={nodes.MBLab_human_male_2.skeleton} />
      <skinnedMesh geometry={nodes.MBLab_human_male_3.geometry} material={materials.MBlab_human_eyes} skeleton={nodes.MBLab_human_male_3.skeleton} />
      <skinnedMesh geometry={nodes.MBLab_human_male_4.geometry} material={materials.MBlab_cornea} skeleton={nodes.MBLab_human_male_4.skeleton} />
      <skinnedMesh geometry={nodes.MBLab_human_male_5.geometry} material={materials.MBlab_iris} skeleton={nodes.MBLab_human_male_5.skeleton} />
      <skinnedMesh geometry={nodes.MBLab_human_male_6.geometry} material={materials.MBLab_skin2} skeleton={nodes.MBLab_human_male_6.skeleton} />
      <skinnedMesh geometry={nodes.MBLab_human_male_7.geometry} material={materials.MBLab_tongue} skeleton={nodes.MBLab_human_male_7.skeleton} />
      <skinnedMesh geometry={nodes.MBLab_human_male_8.geometry} material={materials.MBlab_human_teeth} skeleton={nodes.MBLab_human_male_8.skeleton} />
      <skinnedMesh geometry={nodes.MBLab_human_male_9.geometry} material={materials.MBLab_nails} skeleton={nodes.MBLab_human_male_9.skeleton} />
      </>
      )}
      </group>
    );
  }
export default Anatomymodel;